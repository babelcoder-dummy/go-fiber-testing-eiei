// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_demo

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository[T interface{}, U interface{}] struct {
	mock.Mock
}

type MockRepository_Expecter[T interface{}, U interface{}] struct {
	mock *mock.Mock
}

func (_m *MockRepository[T, U]) EXPECT() *MockRepository_Expecter[T, U] {
	return &MockRepository_Expecter[T, U]{mock: &_m.Mock}
}

// Save provides a mock function with given fields: _a0
func (_m *MockRepository[T, U]) Save(_a0 T) (U, error) {
	ret := _m.Called(_a0)

	var r0 U
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (U, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(T) U); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(U)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call[T interface{}, U interface{}] struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 T
func (_e *MockRepository_Expecter[T, U]) Save(_a0 interface{}) *MockRepository_Save_Call[T, U] {
	return &MockRepository_Save_Call[T, U]{Call: _e.mock.On("Save", _a0)}
}

func (_c *MockRepository_Save_Call[T, U]) Run(run func(_a0 T)) *MockRepository_Save_Call[T, U] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockRepository_Save_Call[T, U]) Return(_a0 U, _a1 error) *MockRepository_Save_Call[T, U] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Save_Call[T, U]) RunAndReturn(run func(T) (U, error)) *MockRepository_Save_Call[T, U] {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository[T interface{}, U interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository[T, U] {
	mock := &MockRepository[T, U]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
