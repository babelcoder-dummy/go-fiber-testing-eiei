// Code generated by mockery v2.36.1. DO NOT EDIT.

package mock_repository

import (
	model "github.com/babelcoder-enterprise-courses/go-fiber-testing/model"
	mock "github.com/stretchr/testify/mock"
)

// MockProducter is an autogenerated mock type for the Producter type
type MockProducter struct {
	mock.Mock
}

type MockProducter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProducter) EXPECT() *MockProducter_Expecter {
	return &MockProducter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockProducter) Create(_a0 *model.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProducter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *model.Product
func (_e *MockProducter_Expecter) Create(_a0 interface{}) *MockProducter_Create_Call {
	return &MockProducter_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockProducter_Create_Call) Run(run func(_a0 *model.Product)) *MockProducter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Product))
	})
	return _c
}

func (_c *MockProducter_Create_Call) Return(_a0 error) *MockProducter_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducter_Create_Call) RunAndReturn(run func(*model.Product) error) *MockProducter_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *MockProducter) Delete(_a0 uint) {
	_m.Called(_a0)
}

// MockProducter_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProducter_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 uint
func (_e *MockProducter_Expecter) Delete(_a0 interface{}) *MockProducter_Delete_Call {
	return &MockProducter_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *MockProducter_Delete_Call) Run(run func(_a0 uint)) *MockProducter_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockProducter_Delete_Call) Return() *MockProducter_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProducter_Delete_Call) RunAndReturn(run func(uint)) *MockProducter_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: _a0
func (_m *MockProducter) FindAll(_a0 string) []model.Product {
	ret := _m.Called(_a0)

	var r0 []model.Product
	if rf, ok := ret.Get(0).(func(string) []model.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	return r0
}

// MockProducter_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockProducter_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - _a0 string
func (_e *MockProducter_Expecter) FindAll(_a0 interface{}) *MockProducter_FindAll_Call {
	return &MockProducter_FindAll_Call{Call: _e.mock.On("FindAll", _a0)}
}

func (_c *MockProducter_FindAll_Call) Run(run func(_a0 string)) *MockProducter_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProducter_FindAll_Call) Return(_a0 []model.Product) *MockProducter_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducter_FindAll_Call) RunAndReturn(run func(string) []model.Product) *MockProducter_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: _a0
func (_m *MockProducter) FindByID(_a0 uint) (*model.Product, error) {
	ret := _m.Called(_a0)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProducter_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockProducter_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - _a0 uint
func (_e *MockProducter_Expecter) FindByID(_a0 interface{}) *MockProducter_FindByID_Call {
	return &MockProducter_FindByID_Call{Call: _e.mock.On("FindByID", _a0)}
}

func (_c *MockProducter_FindByID_Call) Run(run func(_a0 uint)) *MockProducter_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockProducter_FindByID_Call) Return(_a0 *model.Product, _a1 error) *MockProducter_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProducter_FindByID_Call) RunAndReturn(run func(uint) (*model.Product, error)) *MockProducter_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockProducter) Update(_a0 *model.Product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProducter_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProducter_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *model.Product
func (_e *MockProducter_Expecter) Update(_a0 interface{}) *MockProducter_Update_Call {
	return &MockProducter_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockProducter_Update_Call) Run(run func(_a0 *model.Product)) *MockProducter_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Product))
	})
	return _c
}

func (_c *MockProducter_Update_Call) Return(_a0 error) *MockProducter_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProducter_Update_Call) RunAndReturn(run func(*model.Product) error) *MockProducter_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProducter creates a new instance of MockProducter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProducter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProducter {
	mock := &MockProducter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
